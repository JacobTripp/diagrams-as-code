package {{.LowerName}}

import (
  "testing"

	"github.com/JacobTripp/diagrams-as-code/diagrams/process/activity/path"
	"github.com/JacobTripp/diagrams-as-code/dot/node"
	"github.com/stretchr/testify/assert"
)

func TestNew(t *testing.T) {
  {{.Initial}} := New()
  assert.IsType(t, {{.Name}}{}, {{.Initial}})
  assert.Implements(t, (*path.Node)(nil), &{{.Initial}})
}

func TestString(t *testing.T) {
  {{.Initial}} := New()
  expected := "\"{{.Name}}\""
  assert.Contains(t, {{.Initial}}.String(), expected)
}

func TestName(t *testing.T) {
  {{.Initial}} := New()
  expected := "{{.Name}}"
  assert.Equal(t, expected, {{.Initial}}.Name())
}

func TestGetAttrs(t *testing.T) {
  {{.Initial}} := New()
  assert.Len(t, {{.Initial}}.GetAttrs(), 0)
}

func TestAddAttribute(t *testing.T) {
  {{.Initial}} := New()
  {{.Initial}}.AddAttribute("foo", "bar")
  assert.Len(t, {{.Initial}}.GetAttrs(), 1)
}

func TestNode(t *testing.T) {
  {{.Initial}} := New()
  n := {{.Initial}}.Node()
  assert.IsType(t, node.Node{}, n)
}
