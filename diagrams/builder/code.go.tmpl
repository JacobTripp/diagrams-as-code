//
// THIS CODE IS AUTO GENERATED, DO NOT EDIT!
//
package {{.PackageName}}

type {{.StructName}} struct {
  name string
  description string
  p path.Path
}

func New(name string) {{.StructName}} {
  return {{.StructName}}{
    name: {{.Name}},
    description: {{.Description}},
    p: path.New(),
  }
}

{{range .Edges}}
type {{.StructName}} struct {
  name string
  description string
  e edge.Edge
}

func New{{.StructName}}(from, to string) {{.StructName}} {
  e := edge.New()
  e.From(from)
  e.To(to)
  return {{.StructName}}{
    name: {{.Name}},
    description: {{.Description}},
    e: e,
  }
}

func (e {{.StructName}}) Write(out io.Writer) error {
  var buf bytes.NewBuffer()
  tmpl, err := template.Parse({{.Template}})
  if err != nil {
    return err
  }
  tmpl.Execute(out, e.e)
}
func (d  {{$.StructName}}) Add{{.StructName}}(name string) {
  d.p.PushBack(New{{.StructName}}(name))
}
{{end}}
{{range .Nodes}}
type {{.StructName}} struct {
  name string
  description string
  n node.Node
}

func New{{.StructName}}(name string) {{.StructName}} {
  n := node.New(name)
  n.AddAttrs(.Attributes)
  return {{.StructName}} {
    name: {{.Name}},
    description: {{.Name}},
    n: n,
  }
}

func (n {{.StructName}}) String() string {
  return n.n.String()
}
func (n {{.StructName}}) Write(out io.Writer) error {
  var buf bytes.NewBuffer()
  tmpl, err := template.Parse({{.Template}})
  if err != nil {
    return err
  }
  tmpl.Execute(out, n.n)
}
func (d  {{$.StructName}}) Add{{.StructName}}(name string) {
  d.p.PushBack(New{{.StructName}}(name))
}
{{end}}
